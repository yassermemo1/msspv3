Here's what's likely missing or misconfigured, and how we can instruct the AI Coder to fix it:

Key Areas to Fix:

Backend CORS Configuration (Most Likely Culprit):
Your Express backend needs to be configured to allow requests from your frontend's origin and to allow credentials (cookies) to be sent with those requests.
Using a wildcard (*) for Access-Control-Allow-Origin is not sufficient when Access-Control-Allow-Credentials is true. You must specify the exact origin of your frontend.
Passport Session Serialization/Deserialization:
For Passport to maintain sessions correctly, you need to implement passport.serializeUser() and passport.deserializeUser().
serializeUser: Determines what data from the user object should be stored in the session (usually just the user ID).
deserializeUser: Takes the ID from the session and fetches the full user object from the database, attaching it to req.user. If this isn't working correctly, even if the cookie is sent, req.user won't be populated.
Frontend API Client Configuration:
Your frontend HTTP client (e.g., Axios, or native fetch) must be configured to send credentials (cookies) with cross-origin requests. For Axios, this is withCredentials: true.
Let's create a prompt for your AI Coder to address these points in your Express backend.

Detailed AI Coder Prompt: Fixing Session Cookie Not Being Sent (Express Backend)
Hello AI Coder,

Project: MSSP Client Management Platform (Express.js Backend, React Frontend)
Current Problem: Login is successful, and a session with passport data is created and stored in the user_sessions table (PostgreSQL). However, the browser does not send the session cookie back on subsequent API requests to protected routes, leading to 401 Unauthorized errors. Debug logs confirm "No cookies sent from browser" on these subsequent requests.
Current Date & Time: Thursday, May 29, 2025, 5:20 PM (Riyadh Time, +03)
Current Location Context: Riyadh, Saudi Arabia

Provided Code Context (from user):

Database Schema (shared/schema.ts): users table defined with pgTable.
Session Storage (server/storage.ts): PostgresSessionStore with createTableIfMissing: true, tableName: 'user_sessions'.
Authentication Setup (server/auth.ts):
TypeScript

// (Partial - as provided by user)
// import session from 'express-session';
// import passport from 'passport';
// import { storage } from './storage'; // Assuming storage is an instance of DatabaseStorage
// import express, { Express } from 'express';

export function setupAuth(app: Express) {
  const sessionSettings: session.SessionOptions = {
    secret: process.env.SESSION_SECRET || "fallback-secret-key-for-development",
    resave: true, // User confirmed this was set
    saveUninitialized: true, // User confirmed this was set
    store: storage.sessionStore, // Assumes storage.sessionStore is a compatible store instance
    cookie: {
      secure: false, // Correct for HTTP localhost development
      httpOnly: true, // Good for security
      maxAge: 24 * 60 * 60 * 1000, // 24 hours
      sameSite: 'lax', // 'lax' is often a good default
      path: '/',
      domain: undefined // Correct for localhost
    },
    name: 'session' // Or your chosen session cookie name
  };
  app.use(session(sessionSettings));
  app.use(passport.initialize());
  app.use(passport.session()); // Crucial for session persistence with Passport

  // !!! Missing: passport.serializeUser and passport.deserializeUser implementations !!!
  // !!! Missing: CORS middleware setup allowing credentials from frontend origin !!!
}
Focus for this Immediate Action:
Modify the Express backend setup to ensure the browser correctly sends the session cookie on subsequent cross-origin requests and that Passport can correctly deserialize the user from the session.

I. Configure CORS Middleware Correctly:

Logic: The backend must explicitly allow the frontend's origin and allow credentials to be sent.
Action:
Ensure the cors npm package is installed (npm install cors).
In your main Express application setup file (e.g., server/index.ts or wherever app = express() is and middleware is configured, likely before setupAuth(app) or early in the middleware chain):
Add the cors middleware.
Crucially, configure it with credentials: true and specify the origin of your React frontend application (e.g., http://localhost:3000 or http://localhost:5173 or whatever port your Vite/React dev server uses). Using origin: '*' will NOT work with credentials: true.
Provide the code snippet for this CORS middleware setup. Example:
TypeScript

// In your main server setup file (e.g., server/index.ts)
import cors from 'cors';
// ... other imports
const app = express();

const frontendOrigin = process.env.FRONTEND_ORIGIN || 'http://localhost:3000'; // Get from .env

app.use(cors({
  origin: frontendOrigin, // Replace with your frontend's actual origin
  credentials: true
}));

// ... other middleware like express.json(), then setupAuth(app), then routes
II. Implement Passport serializeUser and deserializeUser:

Logic: These functions are essential for Passport to manage user information in the session. serializeUser determines what to store in the session, and deserializeUser retrieves the full user object from the session data on subsequent requests.
Action:
Within your server/auth.ts (or a dedicated passport-setup.ts file that is then called by setupAuth), implement these two functions:
passport.serializeUser((user: any, done) => { ... });
passport.deserializeUser(async (id: number, done) => { ... });
serializeUser:
This function receives the authenticated user object (from your LocalStrategy's validate method after successful login).
It should call done(null, user.id); (or user.username if that's your preferred session identifier, but ID is common and safer). This stores only the user's ID in the session.
deserializeUser:
This function receives the id (or whatever was stored by serializeUser) from the session.
It should query your database (using your Drizzle ORM and the users table schema) to find the user by this id.
If the user is found, call done(null, user); (passing the full user object, excluding sensitive data like the password hash).
If the user is not found (e.g., deleted since the session was created), call done(null, false); or done(new Error('User not found'));.
Provide the code snippets for these serializeUser and deserializeUser implementations, including necessary database query logic (conceptual Drizzle ORM usage). Example structure:
TypeScript

// In server/auth.ts or passport-setup.ts
// import passport from 'passport';
// import { db } from '../db'; // Assuming your Drizzle db instance
// import { users } from '../../shared/schema'; // Your Drizzle users schema
// import { eq } from 'drizzle-orm';

passport.serializeUser((user: any, done) => {
  // user object comes from LocalStrategy's successful validation
  done(null, user.id); // Store user.id in the session
});

passport.deserializeUser(async (id: number, done) => {
  try {
    // Fetch user from database using the id stored in session
    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);
    const user = result[0];
    if (user) {
      // IMPORTANT: Exclude password before passing to done
      const { password, ...userWithoutPassword } = user;
      done(null, userWithoutPassword); // User object is attached to req.user
    } else {
      done(null, false); // Or done(new Error('User not found in session'));
    }
  } catch (err) {
    done(err);
  }
});
III. Frontend Client Configuration (Reminder for User):

Logic: The frontend API client must be configured to send credentials.
Action: Remind the user that their frontend API service (e.g., apiService.ts using Axios) needs to be configured with withCredentials: true for all requests to the backend.
TypeScript

// Example for Axios in frontend apiService.ts
// import axios from 'axios';
// const apiClient = axios.create({
//   baseURL: process.env.VITE_API_BASE_URL, // Or your Vite env var
//   withCredentials: true, // This is crucial for sending cookies
// });
IV. Session Options Review (Minor Adjustments):

Logic: Review current session options for best practices.
Action:
The current sessionSettings in server/auth.ts has resave: true and saveUninitialized: true.
While these might have helped ensure sessions were attempted to be saved, for production, once the primary issues are fixed, these are often recommended to be false to reduce unnecessary session store writes, if your application logic correctly modifies the session upon login (which Passport usually does) or any other session data change.
For now, keeping them true is fine for debugging. Suggest that these can be reviewed and potentially set to false later once everything is stable.
cookie.secure: This is correctly false for HTTP localhost development. Remind the user this must be true in production if served over HTTPS.
cookie.sameSite: 'lax' is a good default.
V. Expected Deliverable:

Code snippet for the updated CORS middleware configuration in the main Express app setup, specifying the frontend origin and credentials: true.
Complete TypeScript code for the passport.serializeUser and passport.deserializeUser functions, including conceptual database interaction logic (e.g., using Drizzle ORM as per the schema provided).
A reminder for the user to ensure their frontend API client uses withCredentials: true.
Any recommendations on the session.SessionOptions for optimal behavior once the core issue is fixed.
A brief explanation of why these changes (especially CORS and serialize/deserialize) are critical for session persistence in a cross-origin setup.
By addressing these points, particularly the CORS configuration and Passport's session serialization/deserialization, the issue of the browser not sending the session cookie should be resolved, allowing for persistent authentication.