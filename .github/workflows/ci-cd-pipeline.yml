name: MSSP Client Manager CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly regression tests
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  # Job 1: Code Quality & Security
  code-quality:
    name: Code Quality & Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For SonarCloud analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run Prettier
        run: npm run format:check
        continue-on-error: true

      - name: TypeScript compilation check
        run: npm run check

      - name: Security audit
        run: npm audit --audit-level=high

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload ESLint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-results
          path: eslint-results.json

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        node-version: [16, 18, 20]  # Test multiple Node.js versions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:unit:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/clover.xml
          flags: unit-tests
          name: unit-tests-node-${{ matrix.node-version }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: |
            test-results/unit-test-results.xml
            coverage/

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Tests (Node ${{ matrix.node-version }})
          path: test-results/unit-test-results.xml
          reporter: jest-junit

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          npm run db:migrate:test
          npm run db:seed:test

      - name: Run integration tests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_SECRET: test-secret-key
        run: npm run test:integration

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test-results/integration-test-results.xml

      - name: Publish integration test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Integration Tests
          path: test-results/integration-test-results.xml
          reporter: jest-junit

  # Job 4: E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          npm run db:migrate:test
          npm run db:seed:test

      - name: Build application
        run: npm run build

      - name: Start application in background
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_SECRET: test-secret-key
        run: |
          npm start &
          sleep 10  # Wait for app to start

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            test-results/
            test-results/e2e-report/

      - name: Upload E2E screenshots and videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-screenshots-videos
          path: |
            test-results/screenshots/
            test-results/videos/

      - name: Publish E2E test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: End-to-End Tests
          path: test-results/results.xml
          reporter: jest-junit

  # Job 5: Load Testing
  load-tests:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          npm run db:migrate:test
          npm run db:seed:test

      - name: Build and start application
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_SECRET: test-secret-key
        run: |
          npm run build
          npm start &
          sleep 15  # Wait for app to start

      - name: Run load tests
        env:
          BASE_URL: http://localhost:5000
        run: npm run test:load

      - name: Upload load test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: |
            load-test-results.json
            load-test-summary.html

      - name: Parse load test results
        if: always()
        run: |
          echo "## Load Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Performance test completed. Check artifacts for detailed results." >> $GITHUB_STEP_SUMMARY

  # Job 6: Security Tests
  security-tests:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:5000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            report_html.html
            snyk-results.json

  # Job 7: Build and Deploy
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Build Docker image
        run: |
          docker build -t mssp-client-manager:${{ github.sha }} .
          docker build -t mssp-client-manager:latest .

      - name: Run container security scan
        uses: anchore/scan-action@v3
        with:
          image: mssp-client-manager:latest
          fail-build: true
          severity-cutoff: high

      - name: Upload container scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-results
          path: anchore-reports/

      - name: Deploy to staging
        if: success()
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment script here
          
      - name: Run smoke tests on staging
        if: success()
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test commands here

      - name: Deploy to production
        if: success()
        run: |
          echo "Deploying to production environment..."
          # Add production deployment script here

  # Job 8: Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-tests]
    if: always()
    
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Evaluate quality gates
        run: |
          echo "Evaluating quality gates..."
          
          # Check test results
          UNIT_TEST_STATUS="${{ needs.unit-tests.result }}"
          INTEGRATION_TEST_STATUS="${{ needs.integration-tests.result }}"
          E2E_TEST_STATUS="${{ needs.e2e-tests.result }}"
          SECURITY_TEST_STATUS="${{ needs.security-tests.result }}"
          
          echo "Unit Tests: $UNIT_TEST_STATUS"
          echo "Integration Tests: $INTEGRATION_TEST_STATUS"
          echo "E2E Tests: $E2E_TEST_STATUS"
          echo "Security Tests: $SECURITY_TEST_STATUS"
          
          # Set quality gate status
          if [[ "$UNIT_TEST_STATUS" == "success" && "$INTEGRATION_TEST_STATUS" == "success" && "$E2E_TEST_STATUS" == "success" && "$SECURITY_TEST_STATUS" == "success" ]]; then
            echo "✅ All quality gates passed!"
            echo "QUALITY_GATE_STATUS=PASSED" >> $GITHUB_ENV
          else
            echo "❌ Quality gates failed!"
            echo "QUALITY_GATE_STATUS=FAILED" >> $GITHUB_ENV
            exit 1
          fi

      - name: Update commit status
        uses: actions/github-script@v7
        with:
          script: |
            const status = process.env.QUALITY_GATE_STATUS === 'PASSED' ? 'success' : 'failure';
            const description = process.env.QUALITY_GATE_STATUS === 'PASSED' 
              ? 'All quality gates passed' 
              : 'Quality gates failed';
            
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              description: description,
              context: 'Quality Gates'
            });

      - name: Generate test report
        if: always()
        run: |
          echo "# Test Execution Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "| Test Type | Status | Duration |" >> test-summary.md
          echo "|-----------|--------|----------|" >> test-summary.md
          echo "| Unit Tests | ${{ needs.unit-tests.result }} | - |" >> test-summary.md
          echo "| Integration Tests | ${{ needs.integration-tests.result }} | - |" >> test-summary.md
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} | - |" >> test-summary.md
          echo "| Security Tests | ${{ needs.security-tests.result }} | - |" >> test-summary.md
          echo "" >> test-summary.md
          echo "Quality Gate Status: **${{ env.QUALITY_GATE_STATUS }}**" >> test-summary.md
          
          cat test-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload test summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-execution-summary
          path: test-summary.md

  # Job 9: Notifications
  notifications:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [quality-gates, build-and-deploy]
    if: always()
    
    steps:
      - name: Send Slack notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'ci-cd-alerts'
          SLACK_COLOR: 'danger'
          SLACK_MESSAGE: 'CI/CD Pipeline failed for MSSP Client Manager'
          SLACK_TITLE: 'Pipeline Failure'
          SLACK_USERNAME: 'GitHub Actions'

      - name: Send success notification
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'ci-cd-alerts'
          SLACK_COLOR: 'good'
          SLACK_MESSAGE: 'CI/CD Pipeline completed successfully for MSSP Client Manager'
          SLACK_TITLE: 'Pipeline Success'
          SLACK_USERNAME: 'GitHub Actions'

      - name: Create GitHub issue on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Nightly CI/CD Pipeline Failed',
              body: 'The nightly CI/CD pipeline has failed. Please investigate and fix the issues.',
              labels: ['bug', 'ci-cd', 'high-priority']
            });

# Workflow for manual quality assurance
  manual-qa:
    name: Manual QA Checklist
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: QA Checklist
        run: |
          echo "## Manual QA Checklist" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please verify the following before merging:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] UI/UX changes are consistent with design system" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] New features have proper documentation" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Database migrations are backward compatible" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Security considerations have been reviewed" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Performance impact has been assessed" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] API changes are properly versioned" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Error handling and logging are adequate" >> $GITHUB_STEP_SUMMARY 